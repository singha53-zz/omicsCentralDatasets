pathwayDB %>%
group_by(DB) %>%
summarise(n = n()) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity")
pathwayDB %>%
group_by(DB) %>%
summarise(n = n()) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity") +
ylab("Number of pathways per DB") +
xlab("DB") +
theme_classic()
head(pathwayDB)
head(pathwayDB %>%
dplyr::select(DB, Pathways))
dim(pathwayDB %>%
dplyr::select(DB, Pathways)
group_by(DB, Pathways))
dim(pathwayDB %>%
dplyr::select(DB, Pathways))
dim(pathwayDB %>%
dplyr::select(DB, Pathways) %>%
group_by(DB, Pathways) )
pathwayDB %>%
group_by(DB) %>%
summarise(n = n_distinct()) %>%
ggplot(aes(x = DB, y = n)) +
geom_bar(stat = "identity")
pathwayDB %>%
group_by(DB) %>%
summarise(n = n_distinct(Pathways)) %>%
ggplot(aes(x = DB, y = n)) +
geom_bar(stat = "identity")
pathwayDB %>%
group_by(DB) %>%
summarise(n = n_distinct(Pathways)) %>%
ggplot(aes(x = reorder(DB, ~n), y = n)) +
geom_bar(stat = "identity")
pathwayDB %>%
group_by(DB) %>%
summarise(n = n_distinct(Pathways)) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity")
pathwayDB %>%
group_by(DB) %>%
summarise(n = n_distinct(Pathways)) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity") +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
pathwayDB %>%
ggplot(aes(x = Pathways, y = n)) +
geom_bar(stat = "identity") +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
head(pathwayDB)
head(pathwayDB %>%
group_by(DB, Pathways) %>%
summarise(n = n()))
ggplot(aes(x = Pathways, y = n)) +
geom_bar(stat = "identity") +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
pathwayDB %>%
group_by(DB, Pathways) %>%
summarise(n = n()) %>%
ggplot(aes(x = Pathways, y = n)) +
geom_bar(stat = "identity") +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
pathwayDB %>%
group_by(DB, Pathways) %>%
summarise(n = n()) %>%
ggplot(aes(x = n)) +
geom_histogram()
pathwayDB %>%
group_by(DB, Pathways) %>%
summarise(n = n()) %>%
ggplot(aes(x = n)) +
geom_histogram() +
facet_wrap(vars(DB)) +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
pathwayDB %>%
group_by(DB, Pathways) %>%
summarise(n = n()) %>%
ggplot(aes(x = n)) +
geom_histogram() +
facet_wrap(vars(DB), scales = "free") +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
pathwayDB %>%
group_by(DB, Pathways) %>%
summarise(n = n()) %>%
ggplot(aes(x = n)) +
geom_histogram() +
facet_wrap(vars(DB), scales = "free") +
scale_y_log10() +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
pathwayDB %>%
group_by(DB) %>%
summarise(n = n_distinct(Pathways)) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity") +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
pathwayDB %>%
group_by(DB) %>%
summarise(n = n_distinct(Genes)) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity") +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
head(pathwayTally)
pathwayTally <- pathwayDB %>%
group_by(DB, Pathways) %>%
summarise(n = n())
pathwayTally %>%
ggplot(aes(x = n)) +
geom_histogram() +
facet_wrap(vars(DB), scales = "free") +
scale_y_log10() +
ylab("Frequency of genesets with a given number of genes") +
xlab("Number of genes") +
theme_classic()
head(pathwayTally)
pathwayTally %>%
arrnage(n) %>%
slice(1)
pathwayTally %>%
arrange(n) %>%
slice(1)
pathwayTally %>%
arrange(desc(n)) %>%
slice(1)
pathwayTally %>%
ggplot(aes(x = n)) +
geom_histogram() +
facet_wrap(vars(DB), scales = "free") +
scale_y_log10() +
ylab("Frequency of genesets with a given number of genes") +
xlab("Number of genes") +
theme_classic()
library(tidyverse); library(knitr);
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, warning = FALSE, message = FALSE)
library(tidyverse); library(knitr);
databaseFiles <- c("BioCarta_2016.csv", "KEGG_2019_Human.csv", "Reactome_2016.csv", "WikiPathways_2019_Human.csv")
pathwayDB <- lapply(databaseFiles, function(pathwayName){
cat("Processing: ", pathwayName, fill = TRUE)
dat <- read.csv(here::here("rawData", pathwayName), header = FALSE)
dat[dat == ""] <- NA
dat %>%
gather(Members, Genes, -V1) %>%
filter(!is.na(Genes)) %>%
rename(Pathways = V1) %>%
dplyr::select(Pathways, Genes) %>%
mutate(DB = gsub(".csv", "", pathwayName))
}) %>%
do.call(rbind, .)
pathwayDB %>%
dplyr::select(DB, Pathways) %>%
group_by(DB, Pathways) %>%
summarise(n = n()) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity") +
ylab("Number of pathways per DB") +
xlab("DB") +
theme_classic()
pathwayDB %>%
group_by(DB) %>%
summarise(n = n_distinct(Genes)) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity") +
ylab("Number of genesets") +
xlab("DB") +
theme_classic()
pathwayTally <- pathwayDB %>%
group_by(DB, Pathways) %>%
summarise(n = n())
pathwayTally %>%
ggplot(aes(x = n)) +
geom_histogram() +
facet_wrap(vars(DB), scales = "free") +
scale_y_log10() +
ylab("Frequency of genesets with a given number of genes") +
xlab("Number of genes") +
theme_classic()
usethis::use_data(pathwayDB)
data(pathwaysDB)
head(pathwayDB)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE, message = FALSE)
library(tidyverse); library(knitr);
databaseFiles <- c("BioCarta_2016.csv", "KEGG_2019_Human.csv", "Reactome_2016.csv", "WikiPathways_2019_Human.csv")
pathwayDB <- lapply(databaseFiles, function(pathwayName){
cat("Processing: ", pathwayName, fill = TRUE)
dat <- read.csv(here::here("rawData", pathwayName), header = FALSE)
dat[dat == ""] <- NA
dat %>%
gather(Members, Genes, -V1) %>%
filter(!is.na(Genes)) %>%
rename(Pathways = V1) %>%
dplyr::select(Pathways, Genes) %>%
mutate(DB = gsub(".csv", "", pathwayName))
}) %>%
do.call(rbind, .)
pathwayDB %>%
dplyr::select(DB, Pathways) %>%
group_by(DB, Pathways) %>%
summarise(n = n()) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity") +
ylab("Number of pathways per DB") +
xlab("DB") +
theme_classic()
pathwayDB %>%
dplyr::select(DB, Pathways) %>%
group_by(DB) %>%
summarise(n = n_distinct(Pathways)) %>%
ggplot(aes(x = reorder(DB, -n), y = n)) +
geom_bar(stat = "identity") +
ylab("Number of pathways per DB") +
xlab("DB") +
theme_classic()
library(omicsDatasets);
data(pathwayDB)
class(pathwayDB)
head(pathwayDB)
head(as_tibble(pathwayDB))
as_tibble(pathwayDB)
class(as_tibble(pathwayDB))
roxygen2::roxygenise()
roxygen2::roxygenise()
document()
document::document()
devtools::document()
devtools::document()
library(omicsCentralDatasets)
head(pathwayDB)
head(pathwayDB)
library(omicsCentralDatasets)
head(pathwayDB)
pathwayDB$Pathways
library(omicsCentralDatasets)
?pathwayDB
knitr::opts_chunk$set(echo = TRUE)
load("asthmaDatasets.RDATA")
load("asthmaDatasets.RDATA")
load(here::here("dataCleaning", "asthma", "data", "asthmaDatasets.RDATA"))
getwd()
here::here("dataCleaning", "asthma", "data", "asthmaDatasets.RDATA")
load(here::here("dataCleaning", "asthma", "data", "asthmaDatasets.RDATA"))
getwd()
load(here::here("dataCleaning", "asthma", "data", "asthmaDatasets.RDATA"))
ls()
head(demo)
head(metabolites)
asthma <- list(demo = demo,
cc = cells,
mrna = genDat,
met = metExp,
metAnn = metabolites,
mrnaMod = gene.module,
metMod = metabolite.module)
names(asthma)
sapply(asthma, dim)
dim(genes)
head(genDat)
class(genDat)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE, message = FALSE)
library(tidyverse);
genDat %>%
mutate(genSym = getSYMBOL(rownames(.), "hugene10sttranscriptcluster"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("annotate")
BiocManager::install("annotate")
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE, message = FALSE)
library("tidyverse") # install.packages("tidyverse")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("annotate")
library("annotate")
library("hugene10sttranscriptcluster.db") # BiocManager::install("annotate")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hugene10sttranscriptcluster.db")
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE, message = FALSE)
library("tidyverse") # install.packages("tidyverse")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("annotate")
library("annotate")
library("hugene10sttranscriptcluster.db") # BiocManager::install("hugene10sttranscriptcluster.db")
head(genDat %>%
mutate(genSym = getSYMBOL(rownames(.), "hugene10sttranscriptcluster")))
## summary affy probe sets to gene symbols (average probes with the same gene symbol)
eset0 <- genDat[, -ncol(genDat)] %>%
mutate(genSym = getSYMBOL(rownames(.), "hugene10sttranscriptcluster")) %>%
filter(!is.na(genSym)) %>% group_by(genSym) %>%
summarise_all(funs(mean))
head(eset0)
asthma <- list(demo = demo,
cc = cells,
mrna = eset,
met = metExp,
metAnn = metabolites,
mrnaMod = gene.module,
metMod = metabolite.module)
load(here::here("dataCleaning", "asthma", "data", "asthmaDatasets.RDATA"))
## summary affy probe sets to gene symbols (average probes with the same gene symbol)
eset0 <- genDat[, -ncol(genDat)] %>%
mutate(genSym = getSYMBOL(rownames(.), "hugene10sttranscriptcluster")) %>%
filter(!is.na(genSym)) %>% group_by(genSym) %>%
summarise_all(funs(mean))
eset <- as.matrix(eset0[,-1])
rownames(eset) <- as.character(eset0$genSym)
asthma <- list(demo = demo,
cc = cells,
mrna = eset,
met = metExp,
metAnn = metabolites,
mrnaMod = gene.module,
metMod = metabolite.module)
usethis::use_data(asthma, overwrite = TRUE)
sapply(asthma, dim)
asthma <- list(demo = demo,
cc = cells,
mrna = eset,
met = metExp,
metAnn = metabolites,
mrnaMod = gene.module,
metMod = metabolite.module)
sapply(asthma, dim)
dimnames(sapply(asthma, dim), c("rows", "cols"))
?dimnames
sapply(asthma, dim)
asthma$demo
table(asthma$demo0
)
table(asthma$demo0)
with(asthma$demo0, table(Time, Respone))
asthma$demo0
with(asthma$demo, table(Time, Respone))
asthma$demo
with(asthma$demo, table(Time, Response))
head(cells)
asthma <- list(demo = demo,
cc = cells,
mrna = t(eset),
met = t(metExp),
metAnn = metabolites,
mrnaMod = gene.module,
metMod = metabolite.module)
sapply(asthma, dim)
dataTypes <- c("mrna", "met", "metAnn", "mrnaMod", "metMod")
data.frame(dataType = dataTypes,
size = sapply(asthma, ncol)[dataTypes])
dataTypes <- c("cc", "mrna", "met", "mrnaMod", "metMod")
data.frame(dataType = dataTypes,
size = sapply(asthma, ncol)[dataTypes])
sapply(asthma, dim)
dataTypes <- c("cc", "mrna", "met", "mrnaMod", "metMod")
data.frame(dataType = dataTypes,
size = sapply(asthma, ncol)[dataTypes])
dataTypes <- c("cc", "mrna", "met", "mrnaMod", "metMod")
data.frame(dataTypes = dataTypes,
size = sapply(asthma, ncol)[dataTypes]) %>%
ggpplot(aes(x = reorder(dataTypes, -size), y = size)) +
geom_bar(stat = "identity")
data.frame(dataTypes = dataTypes,
size = sapply(asthma, ncol)[dataTypes]) %>%
ggplot(aes(x = reorder(dataTypes, -size), y = size)) +
geom_bar(stat = "identity")
data.frame(dataTypes = dataTypes,
size = sapply(asthma, ncol)[dataTypes]) %>%
ggplot(aes(x = reorder(dataTypes, -size), y = size)) +
geom_bar(stat = "identity") +
scale_y_log10()
data.frame(dataTypes = dataTypes,
size = sapply(asthma, ncol)[dataTypes])
dataTypes <- c("cc", "mrna", "met", "mrnaMod", "metMod")
data.frame(dataTypes = dataTypes,
size = sapply(asthma, ncol)[dataTypes]) %>%
ggplot(aes(x = reorder(dataTypes, -size), y = size)) +
geom_bar(stat = "identity") +
scale_y_log10() +
ylab("Number of variables") +
xlab("dataset")
data.frame(dataTypes = dataTypes,
size = sapply(asthma, ncol)[dataTypes]) %>%
ggplot(aes(x = reorder(dataTypes, -size), y = size)) +
geom_bar(stat = "identity") +
scale_y_log10() +
ylab("Number of variables") +
xlab("dataset") +
theme_classic()
library(omicsCentralDatasets)
devtools::document()
names(asthma)
dim(Demo)
dim(demo)
dim(cc)
dim(asthma$demo)
sapply(asthma, dim)
devtools::document()
library(omicsCentralDatasets)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE, message = FALSE)
library("tidyverse") # install.packages("tidyverse")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("annotate")
library("annotate")
library("hugene10sttranscriptcluster.db") # BiocManager::install("hugene10sttranscriptcluster.db")
load(here::here("inst", "extdata", "dataCleaning", "asthma", "data", "asthmaDatasets.RDATA"))
head(demo)
rownames(demo)
## add subject to demo
demo$Subj <- strsplit(rownames(demo), "\\.")
strsplit(rownames(demo), "\\.")
sapply(strsplit(rownames(demo), "\\."), function(i){
paste0(i[1], i[2], collapse = "")
})
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE, message = FALSE)
library("tidyverse") # install.packages("tidyverse")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("annotate")
library("annotate")
library("hugene10sttranscriptcluster.db") # BiocManager::install("hugene10sttranscriptcluster.db")
load(here::here("inst", "extdata", "dataCleaning", "asthma", "data", "asthmaDatasets.RDATA"))
## summary affy probe sets to gene symbols (average probes with the same gene symbol)
eset0 <- genDat[, -ncol(genDat)] %>%
mutate(genSym = getSYMBOL(rownames(.), "hugene10sttranscriptcluster")) %>%
filter(!is.na(genSym)) %>% group_by(genSym) %>%
summarise_all(funs(mean))
eset <- as.matrix(eset0[,-1])
rownames(eset) <- as.character(eset0$genSym)
## add subject to demo
demo$Subj <- sapply(strsplit(rownames(demo), "\\."), function(i){
paste0(i[1], i[2], collapse = "")
})
asthma <- list(demo = demo,
cc = cells,
mrna = t(eset),
met = t(metExp),
metAnn = metabolites,
mrnaMod = gene.module,
metMod = metabolite.module)
with(asthma$demo, table(Time, Response))
dataTypes <- c("cc", "mrna", "met", "mrnaMod", "metMod")
data.frame(dataTypes = dataTypes,
size = sapply(asthma, ncol)[dataTypes]) %>%
ggplot(aes(x = reorder(dataTypes, -size), y = size)) +
geom_bar(stat = "identity") +
scale_y_log10() +
ylab("Number of variables") +
xlab("dataset") +
theme_classic()
usethis::use_data(asthma, overwrite = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, warning = FALSE, message = FALSE)
library("tidyverse") # install.packages("tidyverse")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("annotate")
library("annotate")
library("hugene10sttranscriptcluster.db") # BiocManager::install("hugene10sttranscriptcluster.db")
load(here::here("inst", "extdata", "dataCleaning", "asthma", "data", "asthmaDatasets.RDATA"))
## summary affy probe sets to gene symbols (average probes with the same gene symbol)
eset0 <- genDat[, -ncol(genDat)] %>%
mutate(genSym = getSYMBOL(rownames(.), "hugene10sttranscriptcluster")) %>%
filter(!is.na(genSym)) %>% group_by(genSym) %>%
summarise_all(funs(mean))
eset <- as.matrix(eset0[,-1])
rownames(eset) <- as.character(eset0$genSym)
## add subject to demo
demo$Subj <- sapply(strsplit(rownames(demo), "\\."), function(i){
paste0(i[1], i[2], collapse = "")
})
asthma <- list(demo = demo,
cc = cells,
mrna = t(eset),
met = t(metExp),
metAnn = metabolites,
mrnaMod = gene.module,
metMod = metabolite.module)
with(asthma$demo, table(Time, Response))
dataTypes <- c("cc", "mrna", "met", "mrnaMod", "metMod")
data.frame(dataTypes = dataTypes,
size = sapply(asthma, ncol)[dataTypes]) %>%
ggplot(aes(x = reorder(dataTypes, -size), y = size)) +
geom_bar(stat = "identity") +
scale_y_log10() +
ylab("Number of variables") +
xlab("dataset") +
theme_classic()
usethis::use_data(asthma, overwrite = TRUE)
head(demo)
table(demo$Subj)
library(omicsCentralDatasets)
head(asthma$demo)
